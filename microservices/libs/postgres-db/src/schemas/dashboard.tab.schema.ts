import { relations, sql } from 'drizzle-orm';
import {
  pgTable,
  uuid,
  text,
  real,
  boolean,
  smallint,
  json,
} from 'drizzle-orm/pg-core';
import { queries } from './query.schema';
import { widgets } from './dashboard.widget.schema';
import { dataModels } from './data-model.schema';
import {
  chartLegendPlacement,
  chartDateRepresentationEnum,
  tabComponentSubTypeEnum,
  tabComponentTypeEnum,
} from './enums.schema';

export const tabs = pgTable('tab', {
  id: uuid('id')
    .primaryKey()
    .default(sql`gen_random_uuid()`),
  chartAllowImageDownload: boolean('chart_allow_image_download'),
  chartDateRepresentation: chartDateRepresentationEnum(
    'chart_date_representation',
  ),
  chartHasAutomaticZoom: boolean('chart_has_automatic_zoom'),
  chartHasAdditionalSelection: boolean('chart_has_additional_selection'),
  chartLabels: text('chart_labels').array(),
  chartLegendAlign: chartLegendPlacement('chart_legend_align'),
  chartMaximum: real('chart_maximum'),
  chartMinimum: real('chart_minimum'),
  chartPieRadius: smallint('chart_pie_radius'),
  chartStaticValues: real('chart_static_values').array(),
  chartStaticValuesColors: text('chart_static_values_colors').array(),
  chartStaticValuesTicks: real('chart_static_values_ticks').array(),
  chartStaticValuesLogos: text('chart_static_values_logos').array(),
  chartStaticValuesTexts: text('chart_static_values_texts').array(),
  chartUnit: text('chart_unit'),
  chartValues: real('chart_values').array(),
  chartXAxisLabel: text('chart_x_axis_label'),
  chartYAxisLabel: text('chart_y_axis_label'),
  chartYAxisScale: real('chart_y_axis_scale'),
  chartYAxisScaleChartMinValue: real('chart_y_axis_scale_chart_min_value'),
  chartYAxisScaleChartMaxValue: real('chart_y_axis_scale_chart_max_value'),
  childWidgets: text('child_widgets').array(),
  componentSubType: tabComponentSubTypeEnum('component_sub_type'),
  componentType: tabComponentTypeEnum('component_type'),
  dataModelId: uuid('data_model_id').references(() => dataModels.id),
  decimalPlaces: smallint('decimal_places'),
  icon: text('icon'),
  iconColor: text('icon_color'),
  iconText: text('icon_text'),
  iconUrl: text('icon_url'),
  labelColor: text('label_color'),
  iFrameUrl: text('iframe_url'),
  imageSrc: text('image_src'),
  imageUpdateInterval: smallint('image_update_interval'),
  imageUrl: text('image_url'),
  imageAllowJumpoff: boolean('image_allow_jumpoff'),
  imageJumpoffUrl: text('image_jumpoff_url'),
  isStepline: boolean('is_stepline'),
  isStackedChart: boolean('is_stacked_chart'),
  isLayoutVertical: boolean('is_layout_vertical'),
  mapActiveMarkerColor: text('map_active_marker_color'),
  mapAllowFilter: boolean('map_allow_filter'),
  mapAllowLegend: boolean('map_allow_legend'),
  mapAllowPopups: boolean('map_allow_popups'),
  mapAllowScroll: boolean('map_allow_scroll'),
  mapAllowZoom: boolean('map_allow_zoom'),
  mapAttributeForValueBased: text('map_attribute_for_value_based'),
  mapFormSizeFactor: smallint('map_form_size_factor'),
  mapDisplayMode: text('map_display_mode'),
  mapFilterAttribute: text('map_filter_attribute'),
  mapGeoJSON: json('map_geojson'),
  mapGeoJSONSensorBasedColors: boolean('map_geojson_sensorcolors'),
  mapGeoJSONBorderColor: text('map_geojson_bordercolor'),
  mapGeoJSONFillColor: text('map_geojson_fillcolor'),
  mapGeoJSONFillOpacity: real('map_geojson_fillopacity'),
  mapGeoJSONSelectionBorderColor: text('map_geojson_selection_bordercolor'),
  mapGeoJSONSelectionFillColor: text('map_geojson_selection_fillcolor'),
  mapGeoJSONSelectionFillOpacity: real('map_geojson_selection_fillopacity'),
  mapGeoJSONHoverBorderColor: text('map_geojson_hover_bordercolor'),
  mapGeoJSONHoverFillColor: text('map_geojson_hover_fillcolor'),
  mapGeoJSONHoverFillOpacity: real('map_geojson_hover_fillopacity'),
  mapIsFormColorValueBased: boolean('map_is_form_color_value_based'),
  mapIsIconColorValueBased: boolean('map_is_icon_color_value_based'),
  mapLatitude: real('map_latitude'),
  mapLegendDisclaimer: text('map_legend_disclaimer'),
  mapLegendValues: json('map_legend_values'),
  mapLongitude: real('map_longtitude'),
  mapMarkerColor: text('map_marker_color'),
  mapMarkerIcon: text('map_marker_icon'),
  mapMarkerIconColor: text('map_marker_icon_color'),
  mapMaxZoom: smallint('map_max_zoom'),
  mapMinZoom: smallint('map_min_zoom'),
  mapShapeColor: text('map_shape_color'),
  mapShapeOption: text('map_shape_option'),
  mapStandardZoom: smallint('map_standard_zoom'),
  mapWidgetValues: json('map_widget_values'),
  mapWmsUrl: text('map_wms_url'),
  mapCombinedWmsUrl: text('map_combined_wms_url'),
  mapWmsLayer: text('map_wms_layer'),
  mapCombinedWmsLayer: text('map_combined_wms_layer'),
  queryId: uuid('query_id').references(() => queries.id),
  rangeStaticValuesMin: real('range_static_values_min').array(),
  rangeStaticValuesMax: real('range_static_values_max').array(),
  rangeStaticValuesColors: text('range_static_values_colors').array(),
  rangeStaticValuesLogos: text('range_static_values_logos').array(),
  rangeStaticValuesLabels: text('range_static_values_labels').array(),
  setYAxisInterval: boolean('set_y_axis_interval'),
  showLegend: boolean('show_legend'),
  sliderCurrentAttribute: text('slider_current_attribute'),
  sliderMaximumAttribute: text('slider_maximum_attribute'),
  textValue: text('text_value'),
  widgetId: uuid('widget_id').references(() => widgets.id),
  tiles: real('tiles'),
  // listview properties
  listviewName: text('listview_name'),
  listviewIsFilteringAllowed: boolean('listview_is_filtering_allowed'),
  listviewFilterAttribute: text('listview_filter_attribute'),
  listviewShowAddress: boolean('listview_show_address'),
  listviewAddressAttribute: text('listview_address_attribute'),
  listviewShowContact: boolean('listview_show_contact'),
  listviewContactAttribute: text('listview_contact_attribute'),
  listviewShowImage: boolean('listview_show_image'),
  listviewImageAttribute: text('listview_image_attribute'),
  listviewShowCategory: boolean('listview_show_category'),
  listviewCategoryAttribute: text('listview_category_attribute'),
  listviewShowName: boolean('listview_show_name'),
  listviewNameAttribute: text('listview_name_attribute'),
  listviewShowContactName: boolean('listview_show_contact_name'),
  listviewContactNameAttribute: text('listview_contact_name_attribute'),
  listviewShowContactPhone: boolean('listview_show_contact_phone'),
  listviewContactPhoneAttribute: text('listview_contact_phone_attribute'),
  listviewShowParticipants: boolean('listview_show_participants'),
  listviewParticipantsAttribute: text('listview_participants_attribute'),
  listviewShowSupporter: boolean('listview_show_supporter'),
  listviewSupporterAttribute: text('listview_supporter_attribute'),
  listviewShowEmail: boolean('listview_show_email'),
  listviewEmailAttribute: text('listview_email_attribute'),
  listviewShowWebsite: boolean('listview_show_website'),
  listviewWebsiteAttribute: text('listview_website_attribute'),
  listviewShowDescription: boolean('listview_show_description'),
  listviewDescriptionAttribute: text('listview_description_attribute'),
});

export const tabsRelations = relations(tabs, ({ one }) => ({
  widget: one(widgets, {
    fields: [tabs.widgetId],
    references: [widgets.id],
  }),
  query: one(queries, {
    fields: [tabs.queryId],
    references: [queries.id],
  }),
  dataModel: one(dataModels, {
    fields: [tabs.dataModelId],
    references: [dataModels.id],
  }),
}));

export type Tab = typeof tabs.$inferSelect;
export type NewTab = typeof tabs.$inferInsert;
