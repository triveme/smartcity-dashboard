version: "3"

services:
  mongodb:
    build:
      context: .
      dockerfile: Dockerfile-DB
    container_name: mongodb
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb-data:/data/db
    ports:
      - "27021:27021"
    networks:
      - app-network
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=smartcity-dashboard
    command: mongod --port 27021

  frontendservice:
    build:
      context: ./backend/frontendService
      dockerfile: Dockerfile.frontendService_PROD
    container_name: frontendservice
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
    depends_on:
      - mongodb
    networks:
      - app-network
    env_file:
      - .env.prod

  qlservice:
    build:
      context: ./backend/qlService
      dockerfile: Dockerfile.qlService_PROD
    container_name: qlservice
    ports:
      - "8081:8080"
    environment:
      - NODE_ENV=production
      - PORT=8081
    depends_on:
      - mongodb
    networks:
      - app-network
    env_file:
      - .env.prod

  dashboard:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile.frontend_PROD
    container_name: dashboard
    environment:
      - PORT=3000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - frontendservice
      - qlservice
    networks:
      - app-network
    env_file:
      - .env.prod

  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - frontendservice
      - dashboard
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt

networks:
  app-network:
    driver: bridge

volumes:
  mongodb-data:
