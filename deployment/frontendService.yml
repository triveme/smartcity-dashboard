# This section will create a deployment in the Kubernetes cluster
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontendservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontendservice
  template:
    metadata:
      labels:
        app: frontendservice
    spec:
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: frontendservice
          image: "gitlab.opendata-paderborn.de:5050/central/dashboard/dashboard:frontendservice-1.0.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080

---
# This part will create a service for making the deployment reachable for other components
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontendservice
  name: frontendservice
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app: frontendservice
status:
  loadBalancer: {}

---
# This part will expose a service from the inside of the cluster and provide it with a LE certificate
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: frontendservice
  labels:
    app: frontendservice
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-http01-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://graph.dashboard-dev.opendata-paderborn.de"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Origin,X-Requested-With,Content-Type,Accept,X-Access-Token,Is-Admin"
    # nginx.ingress.kubernetes.io/cors-allow-origin: "https://backend.dashboard-dev.opendata-paderborn.de"
spec:
  tls:
    - hosts:
        - "backend.dashboard-dev.opendata-paderborn.de"
      secretName: backend-cert
  rules:
    - host: "backend.dashboard-dev.opendata-paderborn.de"
      http:
        paths:
          - path: "/"
            backend:
              serviceName: frontendservice
              servicePort: 8080
