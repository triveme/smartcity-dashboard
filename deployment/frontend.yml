# This section will create a deployment in the Kubernetes cluster
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: frontend
          image: "gitlab.opendata-paderborn.de:5050/central/dashboard/dashboard:frontend-1.0.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 3000

---
# This part will create a service for making the deployment reachable for other components
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontend
  name: frontend
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    app: frontend
status:
  loadBalancer: {}

---
# This part will expose a service from the inside of the cluster and provide it with a LE certificate
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: frontend
  labels:
    app: frontend
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-http01-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    # nginx.ingress.kubernetes.io/cors-allow-origin: "https://graph.dashboard-dev.opendata-paderborn.de"
spec:
  tls:
    - hosts:
        - "graph.dashboard-dev.opendata-paderborn.de"
      secretName: dashboard-cert
  rules:
    - host: "graph.dashboard-dev.opendata-paderborn.de"
      http:
        paths:
          - path: "/"
            backend:
              serviceName: frontend
              servicePort: 3000
